Design a paradigm of programming that uses a context as a first argument passed to all functions (along with other arguments). The context is how the environment is injected into the functions and contains all dependencies (as a typed collection). All state, similarly, is contained in the context so all side effects are modelled as changes to the context passed in. This allows for synchronisation and checkpointing of concurrent executions. This new paradigm combines functional and procedural programming with object oriented programming. The context is typed but using type inference to ensure that the context contains the dependencies the functions require. Any type can only appear once in a context. So lower case type names can be used to dereference the contextâ€™s variables. A context could be an object and derived objects or a module or namespace or combinations of these built by combining module scopes. Additional function arguments can be by value and by reference but immutability is encouraged and type checked. Results are passed back by a function as one or a tuple (of 2 or more values). Testing uses a mock version of the context, invariants on the context and before and after assertions. Runtime safety similarly can test the context passed using assertions. Errors are passed back explicitly but not in the context. The context may have partial results on errors or be in an invalid state that requires recovery but this is discouraged. One way to represent this in diagrams is inputs on left and results on right, with context coming from above and being passed down below for the next level of transformation, resulting in a lattice style diagramming of computation. The resulting paradigm is called context oriented or context aware programming. It aims to allow AI code generation generate clean code that can be more easily understood by humans or other AI that consume context aware APIs. Write a programming manual for a context oriented programming language.


